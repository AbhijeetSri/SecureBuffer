{
  "name": "Securebuffer",
  "tagline": "software security",
  "body": "# SecureBuffer\r\n\r\n#FileName: \r\n<br/ > SecureBuffer.c \r\n<br/ > test.c\r\n\r\n#Description: \r\n``SecureBuffer.c`` contains source code for various functions secured from buffer overflow attacks.\r\nFunctions included:\r\n* malloc <br/> keeps track of size of memory allocated\r\n* gets\t<br/>\tDoes not let the input get past the set buffer size\r\n* strcpy <br/>\t\tDoes not let the input string copied past destination size - sets last character as '\\0'\r\n* strcat <br/>\t\tDoes not let the resultant string go past Buffer Size, also terminates with '\\0' \r\n* free \t<br/>\t  Deallocates the memory\r\n\r\nFile ``test.c`` includes functions to test the library\r\n\t\r\n# How to Use?\r\n\r\nUsing gcc, simply compile SecureBuffer.c to .so file using below command <br/>\r\n ``$ gcc -w -shared -fPIC -o SecureBuffer.so SecureBuffer.c -ldl ``\r\n \r\nCompile your program using gcc as usual. \r\n<br/>\r\n`` $ gcc normal.c``\r\n<br/>\r\nTo Use the library in any program, use LD_PRELOAD construct <br/>\r\n`` $ LD_PRELOAD=./SecureBuffer.so ./<YOUR PROGRAM> ``\r\n\r\nLD_PRELOAD is used to load a shared library before loading any other librray. Interestig info about LD_PRELOAD can be found [here] (http://stackoverflow.com/questions/426230/what-is-the-ld-preload-trick).\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}